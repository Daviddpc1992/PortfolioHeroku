{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/David/Desktop/PortfolioHeroku/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { PROGRAMACION } from '../db/programacion.db';\nimport * as i0 from \"@angular/core\";\nexport class programacionService {\n  constructor() {}\n\n  getAll() {\n    return PROGRAMACION;\n  }\n\n  getByItem(pItem) {\n    return PROGRAMACION.filter(proyecto => {\n      return proyecto.tipo === pItem && proyecto.tipo2 === pItem;\n    });\n  }\n\n  getById(pId) {\n    return _asyncToGenerator(function* () {\n      for (let proyecto of PROGRAMACION) {\n        if (proyecto.id === pId) {\n          awaitreturn;\n          proyecto;\n        }\n      }\n    })();\n  }\n\n}\n\nprogramacionService.ɵfac = function programacionService_Factory(t) {\n  return new (t || programacionService)();\n};\n\nprogramacionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: programacionService,\n  factory: programacionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\David\\Desktop\\PortfolioHeroku\\src\\app\\service\\programacion.ts"],"names":[],"mappings":";AACA,SAAS,YAAT,QAA6B,uBAA7B;;AAOA,OAAM,MAAO,mBAAP,CAA0B;AAE9B,EAAA,WAAA,GAAA,CAAiB;;AAGjB,EAAA,MAAM,GAAA;AACJ,WAAO,YAAP;AACD;;AACD,EAAA,SAAS,CAAC,KAAD,EAAc;AACrB,WAAO,YAAY,CAAC,MAAb,CACL,QADyB,IAEvB;AAAG,aAAO,QAAQ,CAAC,IAAT,KAAkB,KAAlB,IAA2B,QAAQ,CAAC,KAAT,KAAmB,KAArD;AAA4D,KAF5D,CAAP;AAID;;AAEM,EAAA,OAAO,CAAC,GAAD,EAAY;AAAA;AACxB,WAAK,IAAI,QAAT,IAAqB,YAArB,EAAmC;AACjC,YAAI,QAAQ,CAAC,EAAT,KAAgB,GAApB,EAAyB;AACvB,UAAA,WAAW;AAAC,UAAA,QAAQ;AACrB;AACF;AALuB;AAOzB;;AAtB6B;;;mBAAnB,mB;AAAmB,C;;;SAAnB,mB;AAAmB,EAAA,OAAA,EAAnB,mBAAmB,CAAA,I;AAAA,EAAA,UAAA,EAFlB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { PROGRAMACION } from '../db/programacion.db';\nimport { Programacion } from '../interfaces/programacion.interface';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class programacionService {\n\n  constructor() { }\n\n\n  getAll(): Programacion[] {\n    return PROGRAMACION;\n  }\n  getByItem(pItem: string): Programacion[] {\n    return PROGRAMACION.filter((\n      proyecto\n    ) => { return proyecto.tipo === pItem && proyecto.tipo2 === pItem }\n    )\n  }\n\n   async getById(pId: number): Programacion {\n    for (let proyecto of PROGRAMACION) {\n      if (proyecto.id === pId) {\n        awaitreturn proyecto\n      }\n    }\n\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}